```bash
#!/bin/bash
# batchProcessing-0x04
# Fetch Pok√©mon data in parallel and wait for all background processes to finish.

POKEMONS=("pikachu" "bulbasaur" "charmander" "squirtle" "mew")
OUTPUT_DIR="pokemon_data"
LOG_FILE="failed_requests.log"

mkdir -p "$OUTPUT_DIR"
> "$LOG_FILE"  # Clear log file

fetch_pokemon() {
    local pokemon=$1
    local output_file="$OUTPUT_DIR/${pokemon}.json"

    echo "üîç Fetching data for $pokemon..."
    http_code=$(curl -s -w "%{http_code}" -o "$output_file" "https://pokeapi.co/api/v2/pokemon/$pokemon")

    if [ "$http_code" -eq 200 ]; then
        echo "‚úÖ Successfully fetched data for $pokemon"
    else
        echo "‚ùå Failed to fetch $pokemon (HTTP $http_code)" | tee -a "$LOG_FILE"
        rm -f "$output_file"
    fi
}

# Run all fetches in parallel
for pokemon in "${POKEMONS[@]}"; do
    fetch_pokemon "$pokemon" &
done

# Wait for all background jobs
wait

echo "-----------------------------------"
echo "All background fetching complete."

# Check if output directory exists and contains files
if [ -d "$OUTPUT_DIR" ] && [ "$(ls -A "$OUTPUT_DIR")" ]; then
    echo "‚úÖ Output directory '$OUTPUT_DIR' exists and contains files."
else
    echo "‚ö†Ô∏è Output directory is empty or missing."
fi
```
