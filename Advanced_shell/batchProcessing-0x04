#!/bin/bash
# batchProcessing-0x04
# Fetch Pok√©mon data in parallel and ensure all background processes complete.

POKEMONS=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
OUTPUT_DIR="pokemon_data"
FAILED_LOG="failed_requests.log"

mkdir -p "$OUTPUT_DIR"
> "$FAILED_LOG"  # clear previous log

# Function to fetch a single Pok√©mon
fetch_pokemon() {
    local name="$1"
    local file="$OUTPUT_DIR/${name}.json"

    echo "üîç Fetching $name..."
    http_code=$(curl -s -w "%{http_code}" -o "$file" "https://pokeapi.co/api/v2/pokemon/$name")

    if [ "$http_code" -eq 200 ] && [ -s "$file" ]; then
        echo "‚úÖ $name saved to $file"
    else
        echo "$name failed (HTTP $http_code)" >> "$FAILED_LOG"
        rm -f "$file"
        echo "‚ùå $name fetch failed and file removed"
    fi
}

# Run all fetches in parallel and store PIDs
PIDS=()
for pkm in "${POKEMONS[@]}"; do
    fetch_pokemon "$pkm" &
    PIDS+=($!)
done

# Wait for all background processes to complete
for pid in "${PIDS[@]}"; do
    wait "$pid"
done

echo "-----------------------------------"
echo "All parallel fetches completed."

# Verify output directory contains files
if [ -d "$OUTPUT_DIR" ] && [ "$(ls -A "$OUTPUT_DIR")" ]; then
    echo "‚úÖ Output directory '$OUTPUT_DIR' exists and contains files."
else
    echo "‚ö†Ô∏è Output directory is empty or missing."
fi
